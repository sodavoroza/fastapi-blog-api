name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint-mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install poetry
        run: pip install "poetry==1.5.1"

      - name: Install dependencies
        run: poetry install

      - name: Run pre-commit (ruff / format checks)
        run: poetry run pre-commit run --all-files

      - name: Run mypy
        run: poetry run mypy src

  test:
    runs-on: ubuntu-latest
    needs: lint-mypy
    env:
      TEST_DATABASE_HOST: localhost
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: blog_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install poetry
        run: pip install "poetry==1.5.1"

      - name: Install dependencies
        run: poetry install

      - name: Create test database
        run: |
          export PGPASSWORD=password
          psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS blog_test;"
          psql -h localhost -U postgres -c "CREATE DATABASE blog_test;"

      - name: Run database migrations
        run: poetry run alembic upgrade head

      - name: Run pytest with coverage
        run: poetry run pytest --cov=src --cov-report=term-missing
